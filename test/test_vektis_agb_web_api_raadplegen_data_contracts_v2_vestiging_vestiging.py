# coding: utf-8

"""
    Vektis.AGB.WebAPI.Raadplegen (test-agb-api.vektis.nl/) v2

    De raadpleegdienst biedt de mogelijkheid voor diverse bevragingen op AGB. De informatie die beschikbaar is, kan gebruikt worden voor het aanvragen van AGB-codes met de aanvraagdienst.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vektis_api.models.vektis_agb_web_api_raadplegen_data_contracts_v2_vestiging_vestiging import VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging

class TestVektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging(unittest.TestCase):
    """VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging:
        """Test VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging`
        """
        model = VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging()
        if include_optional:
            return VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging(
                aanvang = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                einde = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                adressen = [
                    vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/v2/zorgpartij/zorgpartij_adres.Vektis.AGB.WebAPI.Raadplegen.DataContracts.v2.Zorgpartij.ZorgpartijAdres(
                        aanvang = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        einde = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        huisnummer = 56, 
                        huisnummer_toevoeging = '', 
                        land = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/land.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Land(
                            code = '0', 
                            omschrijving = '0', ), 
                        plaats = '0', 
                        postcode = '0', 
                        provincie = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/provincie.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Provincie(
                            code = '0', 
                            omschrijving = '0', ), 
                        straat = '0', 
                        type = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/adres_type.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.AdresType(
                            code = '0', 
                            omschrijving = '0', ), )
                    ],
                agb_code = '01234567',
                communicatiegegevens = [
                    vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/v2/zorgpartij/communicatiegegeven.Vektis.AGB.WebAPI.Raadplegen.DataContracts.v2.Zorgpartij.Communicatiegegeven(
                        aanvang = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        einde = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        doel = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/doel.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Doel(
                            code = '0', 
                            omschrijving = '0', ), 
                        gegeven = '0', 
                        type = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/communicatiegegeven_type.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.CommunicatiegegevenType(
                            code = '0', 
                            omschrijving = '0', ), )
                    ],
                erkenningen = [
                    vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/v2/zorgpartij/zorgpartij_erkenning.Vektis.AGB.WebAPI.Raadplegen.DataContracts.v2.Zorgpartij.ZorgpartijErkenning(
                        aanvang = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        einde = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        code = '012345', 
                        omschrijving = '0', 
                        registratie_nummer = '0', )
                    ],
                handelsnaam = '0',
                kwalificaties = [
                    vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/v2/zorgpartij/zorgpartij_kwalificatie.Vektis.AGB.WebAPI.Raadplegen.DataContracts.v2.Zorgpartij.ZorgpartijKwalificatie(
                        aanvang = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        einde = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        code = '0123', 
                        omschrijving = '0', 
                        nictiz_code = '', 
                        patiententerm = '', )
                    ],
                naam = '0',
                statutaire_naam = '',
                zorgpartij_type = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/zorgpartij_type.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.ZorgpartijType(
                    code = '0', 
                    omschrijving = '0', ),
                beheerder_verlener_agb_code = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/beheerder.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Beheerder(
                    code = '0', 
                    omschrijving = '0', ),
                zorgsoort = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/zorgsoort.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Zorgsoort(
                    code = '0', 
                    omschrijving = '0', )
            )
        else:
            return VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging(
                aanvang = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                agb_code = '01234567',
                handelsnaam = '0',
                naam = '0',
                zorgpartij_type = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/zorgpartij_type.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.ZorgpartijType(
                    code = '0', 
                    omschrijving = '0', ),
                beheerder_verlener_agb_code = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/beheerder.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Beheerder(
                    code = '0', 
                    omschrijving = '0', ),
                zorgsoort = vektis_api.models.vektis/agb/web_api/raadplegen/data_contracts/referentiegegevens/zorgsoort.Vektis.AGB.WebAPI.Raadplegen.DataContracts.Referentiegegevens.Zorgsoort(
                    code = '0', 
                    omschrijving = '0', ),
        )
        """

    def testVektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging(self):
        """Test VektisAGBWebAPIRaadplegenDataContractsV2VestigingVestiging"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
