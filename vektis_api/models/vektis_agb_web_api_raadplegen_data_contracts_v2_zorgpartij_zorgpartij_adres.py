# coding: utf-8

"""
    Vektis.AGB.WebAPI.Raadplegen (test-agb-api.vektis.nl/) v2

    De raadpleegdienst biedt de mogelijkheid voor diverse bevragingen op AGB. De informatie die beschikbaar is, kan gebruikt worden voor het aanvragen van AGB-codes met de aanvraagdienst.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from vektis_api.models.vektis_agb_web_api_raadplegen_data_contracts_referentiegegevens_adres_type import VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensAdresType
from vektis_api.models.vektis_agb_web_api_raadplegen_data_contracts_referentiegegevens_land import VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensLand
from vektis_api.models.vektis_agb_web_api_raadplegen_data_contracts_referentiegegevens_provincie import VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensProvincie
from typing import Optional, Set
from typing_extensions import Self

class VektisAGBWebAPIRaadplegenDataContractsV2ZorgpartijZorgpartijAdres(BaseModel):
    """
    
    """ # noqa: E501
    aanvang: datetime = Field(description="DATUMAANVANG, dateTime, Datum vanaf wanneer het adres geldig is", alias="Aanvang")
    einde: Optional[datetime] = Field(default=None, description="DATUMEINDE, dateTime, Datum tot en met wanneer het adres geldig is", alias="Einde")
    huisnummer: StrictInt = Field(description="HUISNUMMER, Huisnummer van het adres", alias="Huisnummer")
    huisnummer_toevoeging: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=8)]] = Field(default=None, description="HUISNUMMERTOEVOEGING, maxLength = 8, Huisnummertoevoeging van het adres", alias="HuisnummerToevoeging")
    land: VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensLand = Field(alias="Land")
    plaats: Annotated[str, Field(min_length=1, strict=True, max_length=60)] = Field(description="PLAATS, maxLength = 60, Plaatsnaam van het adres", alias="Plaats")
    postcode: Annotated[str, Field(min_length=1, strict=True, max_length=8)] = Field(description="POSTCODE, maxLength = 8, Postcode van het adres voor zowel binnenlandse als buitenlandse adressen", alias="Postcode")
    provincie: Optional[VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensProvincie] = Field(default=None, alias="Provincie")
    straat: Annotated[str, Field(min_length=1, strict=True, max_length=60)] = Field(description="STRAATNAAM, maxLength = 60, Straatnaam van het adres", alias="Straat")
    type: VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensAdresType = Field(alias="Type")
    __properties: ClassVar[List[str]] = ["Aanvang", "Einde", "Huisnummer", "HuisnummerToevoeging", "Land", "Plaats", "Postcode", "Provincie", "Straat", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VektisAGBWebAPIRaadplegenDataContractsV2ZorgpartijZorgpartijAdres from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of land
        if self.land:
            _dict['Land'] = self.land.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provincie
        if self.provincie:
            _dict['Provincie'] = self.provincie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['Type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VektisAGBWebAPIRaadplegenDataContractsV2ZorgpartijZorgpartijAdres from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Aanvang": obj.get("Aanvang"),
            "Einde": obj.get("Einde"),
            "Huisnummer": obj.get("Huisnummer"),
            "HuisnummerToevoeging": obj.get("HuisnummerToevoeging"),
            "Land": VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensLand.from_dict(obj["Land"]) if obj.get("Land") is not None else None,
            "Plaats": obj.get("Plaats"),
            "Postcode": obj.get("Postcode"),
            "Provincie": VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensProvincie.from_dict(obj["Provincie"]) if obj.get("Provincie") is not None else None,
            "Straat": obj.get("Straat"),
            "Type": VektisAGBWebAPIRaadplegenDataContractsReferentiegegevensAdresType.from_dict(obj["Type"]) if obj.get("Type") is not None else None
        })
        return _obj


