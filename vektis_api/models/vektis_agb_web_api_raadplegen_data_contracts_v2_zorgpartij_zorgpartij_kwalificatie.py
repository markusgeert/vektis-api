# coding: utf-8

"""
    Vektis.AGB.WebAPI.Raadplegen (test-agb-api.vektis.nl/) v2

    De raadpleegdienst biedt de mogelijkheid voor diverse bevragingen op AGB. De informatie die beschikbaar is, kan gebruikt worden voor het aanvragen van AGB-codes met de aanvraagdienst.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class VektisAGBWebAPIRaadplegenDataContractsV2ZorgpartijZorgpartijKwalificatie(BaseModel):
    """
    
    """ # noqa: E501
    aanvang: datetime = Field(description="DATUMAANVANG, dateTime, Datum vanaf wanneer de kwalificatie geldig is", alias="Aanvang")
    einde: Optional[datetime] = Field(default=None, description="DATUMEINDE, dateTime, Datum tot en met wanneer de kwalificatie geldig is", alias="Einde")
    code: Annotated[str, Field(min_length=4, strict=True, max_length=4)] = Field(description="KWALIFICATIETYPE, length = 4 numeriek in een string, Code kwalificatie, waarde komt voor in codelijst AGB018 of in referentiegegevens 'kwalificaties'", alias="Code")
    omschrijving: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="BETEKENIS, maxLength = 255, Omschrijving van het kwalificatietype", alias="Omschrijving")
    nictiz_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=6)]] = Field(default=None, description="NICTIZ_ID, maxLength = 6, Nictiz code die zorgaanbieders gebruiken voor deze kwalificatie", alias="NictizCode")
    patiententerm: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="BETEKENIS, maxLength = 255, Patiententerm horend bij de Nictiz code", alias="Patiententerm")
    __properties: ClassVar[List[str]] = ["Aanvang", "Einde", "Code", "Omschrijving", "NictizCode", "Patiententerm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VektisAGBWebAPIRaadplegenDataContractsV2ZorgpartijZorgpartijKwalificatie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VektisAGBWebAPIRaadplegenDataContractsV2ZorgpartijZorgpartijKwalificatie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Aanvang": obj.get("Aanvang"),
            "Einde": obj.get("Einde"),
            "Code": obj.get("Code"),
            "Omschrijving": obj.get("Omschrijving"),
            "NictizCode": obj.get("NictizCode"),
            "Patiententerm": obj.get("Patiententerm")
        })
        return _obj


